{"version":3,"sources":["logo.svg","Components/Navbar.js","Components/TextForm.js","Components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","onClick","toggleMode","role","htmlFor","TextForm","useState","text","setText","style","color","heading","backgroundColor","onChange","event","console","log","target","value","rows","newText","toUpperCase","showAlert","toLowerCase","mytext","document","getElementById","select","setSelectionRange","navigator","clipboard","writeText","split","join","length","Alert","alert","typ","msg","App","setMode","setAlert","message","setTimeout","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"oMAAe,I,YCIA,SAASA,EAAOC,GAC7B,OACE,8BACE,qBAAKC,UAAS,yCAAoCD,EAAME,KAA1C,eAAqDF,EAAME,MAAzE,SACE,sBAAKD,UAAU,kBAAf,UACE,mBAAGA,UAAU,eAAeE,KAAK,IAAjC,SAAsCH,EAAMI,QAC5C,wBAAQH,UAAU,iBAAiBI,KAAK,SAAS,iBAAe,WAAW,iBAAe,0BAA0B,gBAAc,yBAAyB,gBAAc,QAAQ,aAAW,oBAA5L,SACE,sBAAMJ,UAAU,0BAElB,sBAAKA,UAAU,2BAA2BK,GAAG,yBAA7C,UACE,oBAAIL,UAAU,kCAAd,SACE,oBAAIA,UAAU,WAAd,SACE,mBAAGA,UAAU,kBAAkB,eAAa,OAAOE,KAAK,IAAxD,sBAWJ,sBAAKF,UAAS,sCAAgD,UAAfD,EAAME,KAAmB,OAAS,SAAjF,UACE,uBAAOD,UAAU,mBAAmBM,QAAWP,EAAMQ,WAAYH,KAAK,WAAWI,KAAK,SAASH,GAAG,2BAClG,uBAAOL,UAAU,mBAAmBS,QAAQ,yBAA5C,4CC1BC,SAASC,EAASX,GAC/B,MAAwBY,mBAAS,IAAjC,mBAAOC,EAAP,KAAaC,EAAb,KAsCA,OACE,qCACE,sBAAKb,UAAU,YAAYc,MAAO,CAAEC,MAAsB,SAAfhB,EAAME,KAAkB,QAAU,SAA7E,UACA,6BAAMF,EAAMiB,UACZ,qBAAKhB,UAAU,OAAf,SACI,0BAAUA,UAAU,eAAec,MAAO,CAAEG,gBAAgC,SAAflB,EAAME,KAAkB,UAAY,QAASc,MAAsB,SAAfhB,EAAME,KAAkB,QAAU,SAAUiB,SA5B9I,SAACC,GACtBC,QAAQC,IAAI,kBACZR,EAAQM,EAAMG,OAAOC,QA0B0KA,MAAOX,EAAMP,GAAG,QAAQmB,KAAK,QAE1N,wBAAQxB,UAAU,kBAAkBM,QA3ClB,WACpBc,QAAQC,IAAI,qBACZ,IAAII,EAAUb,EAAKc,cACnBb,EAAQY,GACR1B,EAAM4B,UAAU,yBAA0B,YAuCxC,kCACA,wBAAQ3B,UAAU,uBAAuBM,QAtCtB,WACrBc,QAAQC,IAAI,qBACZ,IAAII,EAAUb,EAAKgB,cACnBf,EAAQY,GACR1B,EAAM4B,UAAU,yBAA0B,YAkCxC,kCACA,wBAAQ3B,UAAU,uBAAuBM,QA3B3B,WAEhBO,EADc,IAEdd,EAAM4B,UAAU,eAAgB,YAwB9B,wBACA,wBAAQ3B,UAAU,uBAAuBM,QAtB5B,WACf,IAAIuB,EAASC,SAASC,eAAe,SACrCF,EAAOG,SACPH,EAAOI,kBAAkB,EAAG,KAC5BC,UAAUC,UAAUC,UAAUP,EAAON,QAkBnC,uBACA,wBAAQvB,UAAU,uBAAuBM,QAhBnB,WACxB,IAAImB,EAAUb,EAAKyB,MAAM,QACzBxB,EAAQY,EAAQa,KAAK,MACrBvC,EAAM4B,UAAU,uBAAwB,YAatC,oCAEA,sBAAK3B,UAAU,iBAAiBc,MAAO,CAAEC,MAAsB,SAAfhB,EAAME,KAAkB,QAAU,SAAlF,UACA,8CACA,8BAAIW,EAAKyB,MAAM,KAAKE,OAApB,WAAoC3B,EAAK2B,OAAzC,iBACA,gEAAmC,KAAQ3B,EAAKyB,MAAM,KAAKE,OAA3D,oBCzCSC,MAff,SAAezC,GAKb,OACEA,EAAM0C,OAAS,8BACb,qBAAKzC,UAAS,sBAAiBD,EAAM0C,MAAMC,IAA7B,gCAAgElC,KAAK,QAAnF,SACIT,EAAM0C,MAAME,SC2DPC,MApDf,WACE,MAAwBjC,mBAAS,SAAjC,mBAAOV,EAAP,KAAa4C,EAAb,KACA,EAA0BlC,mBAAS,MAAnC,mBAAO8B,EAAP,KAAcK,EAAd,KAEMnB,EAAY,SAACoB,EAAS3C,GAC1B0C,EAAU,CACRH,IAAKI,EACLL,IAAKtC,IAEP4C,YAAW,WACTF,EAAS,QACR,MAiBL,OAEE,cADA,CACA,sBAEA,cAAChD,EAAD,CAAQK,MAAM,YAAYF,KAAMA,EAAMM,WAnBrB,WACL,UAATN,GACD4C,EAAQ,QACRf,SAASmB,KAAKnC,MAAMG,gBAAkB,UACtCU,EAAU,gBAAiB,aAE3BkB,EAAQ,SACRf,SAASmB,KAAKnC,MAAMG,gBAAkB,QACtCU,EAAU,iBAAkB,eAY9B,cAAC,EAAD,CAAOc,MAAOA,IACd,qBAAKzC,UAAU,iBAAf,SAQM,cAACU,EAAD,CAAUiB,UAAWA,EAAWX,QAAQ,kBAAkBf,KAAMA,UC/C3DiD,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEF/B,SAASC,eAAe,SAM1BmB,K","file":"static/js/main.208217e4.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n// import { Link } from 'react-router-dom';\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    <div>\r\n      <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n        <div className=\"container-fluid\">\r\n          <a className=\"navbar-brand\" href=\"/\">{props.title}</a>\r\n          <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n            <span className=\"navbar-toggler-icon\"></span>\r\n          </button>\r\n          <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n            <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n              <li className=\"nav-item\">\r\n                <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\r\n                {/* <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">Home</Link> */}\r\n              </li>\r\n              {/* <li className=\"nav-item\">\r\n                <Link className=\"nav-link\" to=\"/about\">About</Link>\r\n              </li> */}\r\n            </ul>\r\n            {/* <form className=\"d-flex\">\r\n              <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\" />\r\n              <button className=\"btn btn-outline-success\" type=\"submit\">Search</button>\r\n            </form> */}\r\n            <div className={`form-check form-switch text-${props.mode === 'light' ? 'dark' : 'light'}`}>\r\n              <input className=\"form-check-input\" onClick = {props.toggleMode} type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\" />\r\n              <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\"> Enable Dark Mode</label>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </nav>\r\n    </div>\r\n  )\r\n}\r\n\r\nNavbar.propTypes = {title: PropTypes.string,\r\n      aboutText: PropTypes.string\r\n  }\r\n","import React, {useState} from 'react'\r\n\r\n\r\nexport default function TextForm(props) {\r\n  const [text, setText] = useState('');\r\n  //SetText will be used to change the value of text\r\n  const handleUpClick = () => {\r\n    console.log(\"Uppercase clicked\");\r\n    let newText = text.toUpperCase();\r\n    setText(newText);\r\n    props.showAlert(\"Converted to Uppercase\", \"success\");\r\n  }\r\n  const handleLowClick = () => {\r\n    console.log(\"Lowercase clicked\");\r\n    let newText = text.toLowerCase();\r\n    setText(newText);\r\n    props.showAlert(\"Converted to Lowercase\", \"success\");\r\n  }\r\n\r\n  const handleOnChange = (event) => {\r\n    console.log(\"handleOnChange\");\r\n    setText(event.target.value);\r\n  }\r\n\r\n  const clearText = () => {\r\n    let newText = '';\r\n    setText(newText);\r\n    props.showAlert(\"Text cleared\", \"success\");\r\n  }\r\n\r\n  const copyText = () => {\r\n    let mytext = document.getElementById('myBox');\r\n    mytext.select();\r\n    mytext.setSelectionRange(0, 999);\r\n    navigator.clipboard.writeText(mytext.value);\r\n  }\r\n\r\n  const removeExtraSpaces = () => {\r\n    let newText = text.split(/[ ]+/);\r\n    setText(newText.join(' '));\r\n    props.showAlert(\"Extra spaces removed\", \"success\");\r\n  }\r\n  return (\r\n    <>\r\n      <div className=\"container\" style={{ color: props.mode === 'dark' ? 'white' : 'black' }}>\r\n      <h3 >{props.heading}</h3>\r\n      <div className=\"mb-3\">\r\n          <textarea className=\"form-control\" style={{ backgroundColor: props.mode === 'dark' ? '#4646f1' : 'white', color: props.mode === 'dark' ? 'white' : 'black'}} onChange = {handleOnChange} value={text} id=\"myBox\" rows=\"8\"></textarea>\r\n      </div>\r\n      <button className=\"btn btn-primary\" onClick = {handleUpClick}>Convert to UpperCase</button>\r\n      <button className=\"btn btn-primary mx-2\" onClick = {handleLowClick}>Convert to LowerCase</button>\r\n      <button className=\"btn btn-primary mx-1\" onClick = {clearText}>Clear Text</button>\r\n      <button className=\"btn btn-primary mx-1\" onClick = {copyText}>Copy Text</button>\r\n      <button className=\"btn btn-primary mx-1\" onClick = {removeExtraSpaces}>Remove Extra Spaces</button>\r\n    </div>\r\n      <div className=\"container my-3\" style={{ color: props.mode === 'dark' ? 'white' : 'black' }}>\r\n      <h4>Text Summary</h4>\r\n      <p>{text.split(\" \").length} words, {text.length} characters</p>\r\n      <p>Average time to read the text: {0.008 * text.split(\" \").length} minutes</p>\r\n    </div>\r\n    </>\r\n  )\r\n}\r\n","import React from 'react'\r\n\r\nfunction Alert(props) {\r\n  // const capitalize = (word) =>{\r\n  //   const str = word.toLowerCase();\r\n  //   return str.charAt(0).toUpperCase() + str.slice(1);\r\n  // }\r\n  return (\r\n    props.alert && <div>\r\n      <div className={`alert alert-${props.alert.typ} alert-dismissible fade show`} role=\"alert\">\r\n         {props.alert.msg}\r\n       \r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Alert\r\n","import logo from './logo.svg';\nimport './App.css';\nimport Navbar from './Components/Navbar';\nimport TextForm from './Components/TextForm';\n// import About from './Components/About';\nimport Alert from './Components/Alert';\nimport React, {useState} from 'react';\n// import {\n//   BrowserRouter as Router,\n//   Routes,\n//   Route\n// } from \"react-router-dom\";\n\n\n\n\n\nfunction App() {\n  const [mode, setMode] = useState('light');\n  const [alert, setAlert] = useState(null);\n\n  const showAlert = (message, type) => {\n    setAlert ({\n      msg: message,\n      typ: type\n    })\n    setTimeout(() => {\n      setAlert(null);\n    }, 1000);\n  }\n  const toggleMode = () => {\n    if(mode === 'light'){\n      setMode('dark');\n      document.body.style.backgroundColor = '#020238';\n      showAlert(\"Night Mode On\", \"success\");\n    } else {\n      setMode('light');\n      document.body.style.backgroundColor = 'white';\n      showAlert(\"Night Mode Off\", \"success\");\n    }\n  }\n\n\n\n\n  return (\n    // <Router>\n    <>\n    \n    <Navbar title=\"TextUtils\" mode={mode} toggleMode={toggleMode}></Navbar>\n    <Alert alert={alert}/>\n    <div className=\"container my-3\">\n          {/* <Routes> */}\n            {/* <Route exact path=\"/about\" element={<About />}> */}\n              \n            {/* </Route> */}\n          \n            {/* <Route exact path=\"/\" element={<TextForm showAlert={showAlert} heading=\"Enter Your Text\" mode={mode}></TextForm>}> */}\n         \n          <TextForm showAlert={showAlert} heading=\"Enter Your Text\" mode={mode}></TextForm>\n            {/* </Route> */}\n          {/* </Routes> */}\n    </div>\n    \n    </>\n    // {/* </Router> */}\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}